#version 450
// image settings
#define WIDTH 128 // each work item covers a patch of size (W/N)x(H/M)
#define HEIGHT 64

// constants
#define N_LOCAL 16
#define PI 3.1415926

layout (local_size_x = N_LOCAL, local_size_y = 1, local_size_z = 1) in;

layout (binding = 0, rg32f) uniform readonly image2D inputImage;
layout (binding = 1) buffer outputBuffer {
  float isovist;
};
layout (binding = 2) buffer tempBuffer {
  float tmp_global[];
};

shared float tmp_local[N_LOCAL];

void main()
{
  uint chunksize = HEIGHT/N_LOCAL;

  // compute sum per item
  uint ypos = gl_LocalInvocationID.x * chunksize;
  float piH = PI/float(HEIGHT);
  float tmp = 0.0;
  for (uint y = ypos; y < ypos + chunksize && y*2 < HEIGHT; y++) {
    {
      // we rely on the fragment shader saving non-zero value to all components of output image.
      float r = imageLoad(inputImage, ivec2(gl_WorkGroupID.x, y)).y;
      if (r == 0.0) tmp += sin((y + 0.5f)*piH);
    }
  }
  tmp_local[gl_LocalInvocationID.x] = tmp * PI/2/float(HEIGHT)/float(HEIGHT);
  barrier();

  // group sum
  for (uint stride = N_LOCAL >> 1; stride > 0; stride >>= 1) {
    if (gl_LocalInvocationID.x < stride) {
      tmp_local[gl_LocalInvocationID.x] += tmp_local[gl_LocalInvocationID.x + stride];
    }
    barrier();
  }

  if (gl_LocalInvocationID.x == 0) {
    tmp_global[gl_WorkGroupID.x] = tmp_local[0];
  }
}
